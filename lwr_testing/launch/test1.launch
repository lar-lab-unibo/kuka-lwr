<launch>
<!-- LAUNCH INTERFACE -->

<!-- in case you have different robot configurations -->
  <arg default="single_lwr_robot" name="robot_name"/>

<!-- the default is the simulator -->
  <arg default="true" name="use_lwr_sim"/>

<!-- set the parameters for the real interface -->
  <arg default="false" name="lwr_powered"/>
  <arg default="49939" name="port"/>
  <arg default="192.168.0.10" name="ip"/>
  <arg default="$(find single_lwr_robot)/config/980241-FRI-Driver.init" name="file"/>

  <arg default="false" name="t1_limits"/>
  <arg default="joint_trajectory_controller" name="controllers"/>
  <arg default=" full_control_simple" name="stopped_controllers"/>

<!-- in case you want to load moveit from here, it might be hard with the real HW though -->
  <arg default="false" name="load_moveit"/>

<!-- set some ros tools -->
  <arg default="false" name="use_rviz"/>
  <arg default="false" name="gui"/>

<!-- LAUNCH IMPLEMENTATION -->

<!-- the urdf/sdf parameter -->
<!--<param command="$(find xacro)/xacro.py $(find single_lwr_robot)/robot/$(arg robot_name).urdf.xacro" name="robot_description"/>-->
  <param command="$(find xacro)/xacro.py $(find lwr_testing)/descriptions/robot_with_gripper.urdf.xacro" name="robot_description"/>

  <rosparam command="load" file="$(find trimod_gripper)/controllers/controllers.yaml"/>
<!--  <node args="trimod_joint_state_publisher" name="trimod_joint_state_publisher_spawner" ns="trimod" output="screen" pkg="controller_manager" respawn="false" type="spawner"/>-->

  <!-- TRIMOD CONTROLLERS -->
  <!--<node args="trimod_joint_trajectory_controller" name="trimod_joint_state_controller_spawner" ns="trimod" output="screen" pkg="controller_manager" respawn="false" type="spawner"/>-->
  <node args="trimod_joint_trajectory_effort_controller" name="trimod_joint_state_controller_spawner" ns="trimod" output="screen" pkg="controller_manager" respawn="false" type="spawner"/>

<!-- joint and robot state publishers of the full robot description -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[/lwr/joint_states]</rosparam>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <group if="$(arg use_rviz)">
    <node args="-d $(find single_lwr_launch)/launch/rviz_config.rviz" name="lwr_rviz" output="screen" pkg="rviz" respawn="false" type="rviz"/>
  </group>

<!-- robot simulation uses the full robot description -->
  <group if="$(arg use_lwr_sim)">
<!-- spawn the robot in gazebo -->
    <node args="-param robot_description -urdf -model $(arg robot_name)" name="spawn_urdf" output="screen" pkg="gazebo_ros" respawn="false" type="spawn_model"/>

<!-- enable/disable gui at will, the rviz listens to the simulation -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find single_lwr_robot)/worlds/simple_environment.world"/>
      <arg name="paused" value="false"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="gui" value="true"/>
      <arg name="headless" value="false"/>
      <arg name="debug" value="false"/>
    </include>
  </group>

<!-- load moveit configuration -->
  <group if="$(arg load_moveit)">
    <include file="$(find single_lwr_moveit)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="true"/>
      <arg name="debug" value="false"/>
    </include>

<!-- run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find single_lwr_moveit)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
      <arg name="debug" value="false"/>
    </include>
  </group>

<!-- Load updated joint limits (override information from single_lwr_moveit) to respect T1 mode limits -->
  <group if="$(arg t1_limits)" ns="robot_description_planning">
    <rosparam command="load" file="$(find single_lwr_robot)/config/t1_joint_limits.yaml"/>
  </group>

<!-- load robotHW configurations to rosparam server -->
  <rosparam command="load" file="$(find single_lwr_robot)/config/hw_interface.yaml"/>

<!-- load all controller configurations to rosparam server -->
  <rosparam command="load" file="$(find single_lwr_robot)/config/controllers.yaml"/>

<!-- real robot and controllers -->
  <group ns="lwr">
    <group if="$(arg lwr_powered)">
<!--add a copy of the robot description within the name space -->
      <param command="$(find xacro)/xacro.py $(find single_lwr_robot)/robot/$(arg robot_name).urdf.xacro" name="robot_description"/>

      <include file="$(find lwr_hw)/launch/lwr_hw.launch">
        <arg name="port" value="$(arg port)"/>
        <arg name="ip" value="$(arg ip)"/>
        <arg name="file_with_path" value="$(arg file)"/>
<!-- this name MUST match the name you give to the arm in the URDF instance -->
<!-- to minimize errors, you could pass it as a xacro parameter -->
        <arg name="name" value="lwr"/>
      </include>
    </group>

<!-- spawn only desired controllers in current namespace -->
    <node args="full_control_simple" name="controller_stopper" pkg="controller_manager" type="spawner"/>
  </group>


</launch>
